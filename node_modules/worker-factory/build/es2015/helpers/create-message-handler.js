import * as tslib_1 from "tslib";
import { renderMethodNotFoundError, renderMissingResponseError, renderUnexpectedResultError } from './error-renderers';
export const createMessageHandler = (receiver, workerImplementation) => {
    return ({ data: { id, method, params } }) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        const messageHandler = workerImplementation[method];
        try {
            if (messageHandler === undefined) {
                throw renderMethodNotFoundError({ method });
            }
            const response = messageHandler(params);
            if (response === undefined) {
                throw renderMissingResponseError({ method });
            }
            if (id === null) {
                if (response.result !== undefined) {
                    throw renderUnexpectedResultError({ method });
                }
            }
            else if (response instanceof Promise) {
                const asynchronousResponse = yield response;
                if (asynchronousResponse.result === undefined) {
                    throw renderUnexpectedResultError({ method });
                }
                const { result, transferables = [] } = asynchronousResponse;
                receiver.postMessage({ id, result }, transferables);
            }
            else {
                if (response.result === undefined) {
                    throw renderUnexpectedResultError({ method });
                }
                const { result, transferables = [] } = response;
                receiver.postMessage({ id, result }, transferables);
            }
        }
        catch (err) {
            const { message, status = -32603 } = err;
            receiver.postMessage({ error: { code: status, message }, id });
        }
    });
};
//# sourceMappingURL=/build/es2015/helpers/create-message-handler.js.map