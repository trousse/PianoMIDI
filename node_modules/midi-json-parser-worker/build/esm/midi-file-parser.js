import { hexify } from './helpers/hexify';
import { stringify } from './helpers/stringify';
export var parseArrayBuffer = function (arrayBuffer) {
    var dataView = new DataView(arrayBuffer);
    var header = _parseHeaderChunk(dataView); // tslint:disable-line:no-use-before-declare
    var offset = 14;
    var tracks = [];
    for (var i = 0, length = header.numberOfTracks; i < length; i += 1) {
        var track = void 0;
        (_a = _parseTrackChunk(dataView, offset), offset = _a.offset, track = _a.track); // tslint:disable-line:no-use-before-declare
        tracks.push(track);
    }
    return {
        division: header.division,
        format: header.format,
        tracks: tracks
    };
    var _a;
};
var _parseEvent = function (dataView, offset, lastEvent) {
    var result;
    var _a = _readVariableLengthQuantity(// tslint:disable-line:no-use-before-declare
    dataView, offset), nextOffset = _a.offset, delta = _a.value;
    var eventTypeByte = dataView.getUint8(nextOffset);
    if (eventTypeByte === 0xF0) {
        result = _parseSysexEvent(dataView, nextOffset + 1); // tslint:disable-line:no-use-before-declare
    }
    else if (eventTypeByte === 0xFF) {
        result = _parseMetaEvent(dataView, nextOffset + 1); // tslint:disable-line:no-use-before-declare
    }
    else {
        result = _parseMidiEvent(eventTypeByte, dataView, nextOffset + 1, lastEvent); // tslint:disable-line:no-use-before-declare
    }
    result.event.delta = delta;
    return result;
};
var _parseHeaderChunk = function (dataView) {
    if (stringify(dataView, 0, 4) !== 'MThd') {
        throw new Error("Unexpected characters \"" + stringify(dataView, 0, 4) + "\" found instead of \"MThd\"");
    }
    if (dataView.getUint32(4) !== 6) {
        throw new Error("The header has an unexpected length of " + dataView.getUint32(4) + " instead of 6");
    }
    var format = dataView.getUint16(8);
    var numberOfTracks = dataView.getUint16(10);
    var division = dataView.getUint16(12);
    return {
        division: division,
        format: format,
        numberOfTracks: numberOfTracks
    };
};
var _parseMetaEvent = function (dataView, offset) {
    var event;
    var metaTypeByte = dataView.getUint8(offset);
    var _a = _readVariableLengthQuantity(// tslint:disable-line:no-use-before-declare
    dataView, offset + 1), nextOffset = _a.offset, length = _a.value;
    if (metaTypeByte === 0x01) {
        event = {
            text: stringify(dataView, nextOffset, length)
        };
    }
    else if (metaTypeByte === 0x03) {
        event = {
            trackName: stringify(dataView, nextOffset, length)
        };
    }
    else if (metaTypeByte === 0x05) {
        event = {
            lyric: stringify(dataView, nextOffset, length)
        };
    }
    else if (metaTypeByte === 0x20) {
        event = {
            channelPrefix: dataView.getUint8(nextOffset)
        };
    }
    else if (metaTypeByte === 0x21) {
        event = {
            midiPort: dataView.getUint8(nextOffset)
        };
    }
    else if (metaTypeByte === 0x2F) {
        // @todo length must be 0
        event = {
            endOfTrack: true
        };
    }
    else if (metaTypeByte === 0x51) {
        // @todo length must be 5
        event = {
            setTempo: {
                microsecondsPerBeat: ((dataView.getUint8(nextOffset) << 16) + // tslint:disable-line:no-bitwise
                    (dataView.getUint8(nextOffset + 1) << 8) + // tslint:disable-line:no-bitwise
                    dataView.getUint8(nextOffset + 2))
            }
        };
    }
    else if (metaTypeByte === 0x54) {
        var frameRate = void 0;
        // @todo length must be 5
        var hourByte = dataView.getUint8(nextOffset);
        if ((hourByte & 0x60) === 0x00) {
            frameRate = 24;
        }
        else if ((hourByte & 0x60) === 0x20) {
            frameRate = 25;
        }
        else if ((hourByte & 0x60) === 0x40) {
            frameRate = 29;
        }
        else if ((hourByte & 0x60) === 0x60) {
            frameRate = 30;
        }
        event = {
            smpteOffset: {
                frame: dataView.getUint8(nextOffset + 3),
                frameRate: frameRate,
                hour: hourByte & 0x1F,
                minutes: dataView.getUint8(nextOffset + 1),
                seconds: dataView.getUint8(nextOffset + 2),
                subFrame: dataView.getUint8(nextOffset + 4)
            }
        };
    }
    else if (metaTypeByte === 0x58) {
        event = {
            timeSignature: {
                denominator: Math.pow(2, dataView.getUint8(nextOffset + 1)),
                metronome: dataView.getUint8(nextOffset + 2),
                numerator: dataView.getUint8(nextOffset),
                thirtyseconds: dataView.getUint8(nextOffset + 3)
            }
        };
    }
    else if (metaTypeByte === 0x59) {
        // @todo length must be 2
        event = {
            keySignature: {
                key: dataView.getInt8(nextOffset),
                scale: dataView.getInt8(nextOffset + 1)
            }
        };
    }
    else {
        throw new Error("Cannot parse a meta event with a type of \"" + metaTypeByte.toString(16) + "\"");
    }
    return {
        event: event,
        offset: nextOffset + length
    };
};
var _parseMidiEvent = function (statusByte, dataView, offset, lastEvent) {
    var eventType = statusByte >> 4; // tslint:disable-line:no-bitwise
    var sanitizedLastEvent = ((statusByte & 0x80) === 0) ? lastEvent : null; // tslint:disable-line:no-bitwise
    var event;
    var sanitizedOffset = ((statusByte & 0x80) === 0) ? offset - 1 : offset; // tslint:disable-line:no-bitwise
    if (eventType === 0x08 || (sanitizedLastEvent !== null && 'noteOff' in sanitizedLastEvent)) {
        event = {
            noteOff: {
                noteNumber: dataView.getUint8(sanitizedOffset),
                velocity: dataView.getUint8(sanitizedOffset + 1)
            }
        };
        sanitizedOffset += 2;
    }
    else if (eventType === 0x09 || (sanitizedLastEvent !== null && 'noteOn' in sanitizedLastEvent)) {
        var noteNumber = dataView.getUint8(sanitizedOffset);
        var velocity = dataView.getUint8(sanitizedOffset + 1);
        if (velocity === 0) {
            event = {
                noteOff: {
                    noteNumber: noteNumber,
                    velocity: velocity
                }
            };
        }
        else {
            event = {
                noteOn: {
                    noteNumber: noteNumber,
                    velocity: velocity
                }
            };
        }
        sanitizedOffset += 2;
    }
    else if (eventType === 0x0B || (sanitizedLastEvent !== null && // tslint:disable-line:no-bitwise
        'controlChange' in sanitizedLastEvent)) {
        event = {
            controlChange: {
                type: dataView.getUint8(sanitizedOffset),
                value: dataView.getUint8(sanitizedOffset + 1)
            }
        };
        sanitizedOffset += 2;
    }
    else if (eventType === 0x0C || (sanitizedLastEvent !== null && // tslint:disable-line:no-bitwise
        'programChange' in sanitizedLastEvent)) {
        event = {
            programChange: {
                programNumber: dataView.getUint8(sanitizedOffset)
            }
        };
        sanitizedOffset += 1;
    }
    else if (eventType === 0x0E || (sanitizedLastEvent !== null && // tslint:disable-line:no-bitwise
        'pitchBend' in sanitizedLastEvent)) {
        event = {
            pitchBend: dataView.getUint8(sanitizedOffset) | (dataView.getUint8(sanitizedOffset + 1) << 7) // tslint:disable-line:no-bitwise
        };
        sanitizedOffset += 2;
    }
    else {
        throw new Error("Cannot parse a midi event with a type of \"" + eventType.toString(16) + "\"");
    }
    event.channel = statusByte & 0x0F; // tslint:disable-line:no-bitwise
    return { event: event, offset: sanitizedOffset };
};
var _parseSysexEvent = function (dataView, offset) {
    var _a = _readVariableLengthQuantity(// tslint:disable-line:no-use-before-declare
    dataView, offset), nextOffset = _a.offset, length = _a.value;
    return {
        event: {
            sysex: hexify(dataView, nextOffset, length)
        },
        offset: nextOffset + length
    };
};
var _parseTrackChunk = function (dataView, offset) {
    if (stringify(dataView, offset, 4) !== 'MTrk') {
        throw new Error("Unexpected characters \"" + stringify(dataView, offset, 4) + "\" found instead of \"MTrk\"");
    }
    var events = [];
    var length = dataView.getUint32(offset + 4) + offset + 8;
    var event = null;
    var nextOffset = offset + 8;
    while (nextOffset < length) {
        (_a = _parseEvent(dataView, nextOffset, event), event = _a.event, nextOffset = _a.offset);
        events.push(event);
    }
    return {
        offset: nextOffset,
        track: events
    };
    var _a;
};
var _readVariableLengthQuantity = function (dataView, offset) {
    var nextOffset = offset;
    var value = 0;
    while (true) {
        var byte = dataView.getUint8(nextOffset);
        nextOffset += 1;
        if (byte > 127) {
            value += (byte & 0x7F); // tslint:disable-line:no-bitwise
            value <<= 7; // tslint:disable-line:no-bitwise
        }
        else {
            value += byte;
            return {
                offset: nextOffset,
                value: value
            };
        }
    }
};
//# sourceMappingURL=/build/es2015/midi-file-parser.js.map