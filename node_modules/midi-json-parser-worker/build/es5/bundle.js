(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('worker-factory')) :
    typeof define === 'function' && define.amd ? define(['worker-factory'], factory) :
    (factory(global.workerFactory));
}(this, (function (workerFactory) { 'use strict';

    /**
     * This function turns a part of a given ArrayBuffer into a hexadecimal String.
     */
    var hexify = function hexify(dataView) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : dataView.byteLength - (offset - dataView.byteOffset);

        var byteOffset = offset + dataView.byteOffset;
        var hexArray = [];
        var uint8Array = new Uint8Array(dataView.buffer, byteOffset, length);
        for (var i = 0; i < length; i += 1) {
            var hex = uint8Array[i].toString(16).toUpperCase();
            if (hex.length === 1) {
                hex = 0 + hex;
            }
            hexArray[i] = hex;
        }
        return hexArray.join('');
    };

    /**
     * This function turns a part of a given ArrayBuffer into a String.
     */
    var stringify = function stringify(dataView) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : dataView.byteLength - (offset - dataView.byteOffset);

        var byteOffset = offset + dataView.byteOffset;
        var array = new Uint8Array(dataView.buffer, byteOffset, length);
        return String.fromCharCode.apply(null, array);
    };

    var parseArrayBuffer = function parseArrayBuffer(arrayBuffer) {
        var dataView = new DataView(arrayBuffer);
        var header = _parseHeaderChunk(dataView); // tslint:disable-line:no-use-before-declare
        var offset = 14;
        var tracks = [];
        for (var i = 0, length = header.numberOfTracks; i < length; i += 1) {
            var track = void 0;

            // tslint:disable-line:no-use-before-declare
            var _parseTrackChunk2 = _parseTrackChunk(dataView, offset);

            offset = _parseTrackChunk2.offset;
            track = _parseTrackChunk2.track;
            tracks.push(track);
        }
        return {
            division: header.division,
            format: header.format,
            tracks: tracks
        };
    };
    var _parseEvent = function _parseEvent(dataView, offset, lastEvent) {
        var result = void 0;

        var _readVariableLengthQu = _readVariableLengthQuantity( // tslint:disable-line:no-use-before-declare
        dataView, offset),
            nextOffset = _readVariableLengthQu.offset,
            delta = _readVariableLengthQu.value;

        var eventTypeByte = dataView.getUint8(nextOffset);
        if (eventTypeByte === 0xF0) {
            result = _parseSysexEvent(dataView, nextOffset + 1); // tslint:disable-line:no-use-before-declare
        } else if (eventTypeByte === 0xFF) {
            result = _parseMetaEvent(dataView, nextOffset + 1); // tslint:disable-line:no-use-before-declare
        } else {
            result = _parseMidiEvent(eventTypeByte, dataView, nextOffset + 1, lastEvent); // tslint:disable-line:no-use-before-declare
        }
        result.event.delta = delta;
        return result;
    };
    var _parseHeaderChunk = function _parseHeaderChunk(dataView) {
        if (stringify(dataView, 0, 4) !== 'MThd') {
            throw new Error('Unexpected characters "' + stringify(dataView, 0, 4) + '" found instead of "MThd"');
        }
        if (dataView.getUint32(4) !== 6) {
            throw new Error('The header has an unexpected length of ' + dataView.getUint32(4) + ' instead of 6');
        }
        var format = dataView.getUint16(8);
        var numberOfTracks = dataView.getUint16(10);
        var division = dataView.getUint16(12);
        return {
            division: division,
            format: format,
            numberOfTracks: numberOfTracks
        };
    };
    var _parseMetaEvent = function _parseMetaEvent(dataView, offset) {
        var event = void 0;
        var metaTypeByte = dataView.getUint8(offset);

        var _readVariableLengthQu2 = _readVariableLengthQuantity( // tslint:disable-line:no-use-before-declare
        dataView, offset + 1),
            nextOffset = _readVariableLengthQu2.offset,
            length = _readVariableLengthQu2.value;

        if (metaTypeByte === 0x01) {
            event = {
                text: stringify(dataView, nextOffset, length)
            };
        } else if (metaTypeByte === 0x03) {
            event = {
                trackName: stringify(dataView, nextOffset, length)
            };
        } else if (metaTypeByte === 0x05) {
            event = {
                lyric: stringify(dataView, nextOffset, length)
            };
        } else if (metaTypeByte === 0x20) {
            event = {
                channelPrefix: dataView.getUint8(nextOffset)
            };
        } else if (metaTypeByte === 0x21) {
            event = {
                midiPort: dataView.getUint8(nextOffset)
            };
        } else if (metaTypeByte === 0x2F) {
            // @todo length must be 0
            event = {
                endOfTrack: true
            };
        } else if (metaTypeByte === 0x51) {
            // @todo length must be 5
            event = {
                setTempo: {
                    microsecondsPerBeat: (dataView.getUint8(nextOffset) << 16) + ( // tslint:disable-line:no-bitwise
                    dataView.getUint8(nextOffset + 1) << 8) + // tslint:disable-line:no-bitwise
                    dataView.getUint8(nextOffset + 2)
                }
            };
        } else if (metaTypeByte === 0x54) {
            var frameRate = void 0;
            // @todo length must be 5
            var hourByte = dataView.getUint8(nextOffset);
            if ((hourByte & 0x60) === 0x00) {
                frameRate = 24;
            } else if ((hourByte & 0x60) === 0x20) {
                frameRate = 25;
            } else if ((hourByte & 0x60) === 0x40) {
                frameRate = 29;
            } else if ((hourByte & 0x60) === 0x60) {
                frameRate = 30;
            }
            event = {
                smpteOffset: {
                    frame: dataView.getUint8(nextOffset + 3),
                    frameRate: frameRate,
                    hour: hourByte & 0x1F,
                    minutes: dataView.getUint8(nextOffset + 1),
                    seconds: dataView.getUint8(nextOffset + 2),
                    subFrame: dataView.getUint8(nextOffset + 4)
                }
            };
        } else if (metaTypeByte === 0x58) {
            event = {
                timeSignature: {
                    denominator: Math.pow(2, dataView.getUint8(nextOffset + 1)),
                    metronome: dataView.getUint8(nextOffset + 2),
                    numerator: dataView.getUint8(nextOffset),
                    thirtyseconds: dataView.getUint8(nextOffset + 3)
                }
            };
        } else if (metaTypeByte === 0x59) {
            // @todo length must be 2
            event = {
                keySignature: {
                    key: dataView.getInt8(nextOffset),
                    scale: dataView.getInt8(nextOffset + 1)
                }
            };
        } else {
            throw new Error('Cannot parse a meta event with a type of "' + metaTypeByte.toString(16) + '"');
        }
        return {
            event: event,
            offset: nextOffset + length
        };
    };
    var _parseMidiEvent = function _parseMidiEvent(statusByte, dataView, offset, lastEvent) {
        var eventType = statusByte >> 4; // tslint:disable-line:no-bitwise
        var sanitizedLastEvent = (statusByte & 0x80) === 0 ? lastEvent : null; // tslint:disable-line:no-bitwise
        var event = void 0;
        var sanitizedOffset = (statusByte & 0x80) === 0 ? offset - 1 : offset; // tslint:disable-line:no-bitwise
        if (eventType === 0x08 || sanitizedLastEvent !== null && 'noteOff' in sanitizedLastEvent) {
            event = {
                noteOff: {
                    noteNumber: dataView.getUint8(sanitizedOffset),
                    velocity: dataView.getUint8(sanitizedOffset + 1)
                }
            };
            sanitizedOffset += 2;
        } else if (eventType === 0x09 || sanitizedLastEvent !== null && 'noteOn' in sanitizedLastEvent) {
            var noteNumber = dataView.getUint8(sanitizedOffset);
            var velocity = dataView.getUint8(sanitizedOffset + 1);
            if (velocity === 0) {
                event = {
                    noteOff: {
                        noteNumber: noteNumber,
                        velocity: velocity
                    }
                };
            } else {
                event = {
                    noteOn: {
                        noteNumber: noteNumber,
                        velocity: velocity
                    }
                };
            }
            sanitizedOffset += 2;
        } else if (eventType === 0x0B || sanitizedLastEvent !== null && // tslint:disable-line:no-bitwise
        'controlChange' in sanitizedLastEvent) {
            event = {
                controlChange: {
                    type: dataView.getUint8(sanitizedOffset),
                    value: dataView.getUint8(sanitizedOffset + 1)
                }
            };
            sanitizedOffset += 2;
        } else if (eventType === 0x0C || sanitizedLastEvent !== null && // tslint:disable-line:no-bitwise
        'programChange' in sanitizedLastEvent) {
            event = {
                programChange: {
                    programNumber: dataView.getUint8(sanitizedOffset)
                }
            };
            sanitizedOffset += 1;
        } else if (eventType === 0x0E || sanitizedLastEvent !== null && // tslint:disable-line:no-bitwise
        'pitchBend' in sanitizedLastEvent) {
            event = {
                pitchBend: dataView.getUint8(sanitizedOffset) | dataView.getUint8(sanitizedOffset + 1) << 7 // tslint:disable-line:no-bitwise
            };
            sanitizedOffset += 2;
        } else {
            throw new Error('Cannot parse a midi event with a type of "' + eventType.toString(16) + '"');
        }
        event.channel = statusByte & 0x0F; // tslint:disable-line:no-bitwise
        return { event: event, offset: sanitizedOffset };
    };
    var _parseSysexEvent = function _parseSysexEvent(dataView, offset) {
        var _readVariableLengthQu3 = _readVariableLengthQuantity( // tslint:disable-line:no-use-before-declare
        dataView, offset),
            nextOffset = _readVariableLengthQu3.offset,
            length = _readVariableLengthQu3.value;

        return {
            event: {
                sysex: hexify(dataView, nextOffset, length)
            },
            offset: nextOffset + length
        };
    };
    var _parseTrackChunk = function _parseTrackChunk(dataView, offset) {
        if (stringify(dataView, offset, 4) !== 'MTrk') {
            throw new Error('Unexpected characters "' + stringify(dataView, offset, 4) + '" found instead of "MTrk"');
        }
        var events = [];
        var length = dataView.getUint32(offset + 4) + offset + 8;
        var event = null;
        var nextOffset = offset + 8;
        while (nextOffset < length) {
            var _parseEvent2 = _parseEvent(dataView, nextOffset, event);

            event = _parseEvent2.event;
            nextOffset = _parseEvent2.offset;

            events.push(event);
        }
        return {
            offset: nextOffset,
            track: events
        };
    };
    var _readVariableLengthQuantity = function _readVariableLengthQuantity(dataView, offset) {
        var nextOffset = offset;
        var value = 0;
        while (true) {
            var byte = dataView.getUint8(nextOffset);
            nextOffset += 1;
            if (byte > 127) {
                value += byte & 0x7F; // tslint:disable-line:no-bitwise
                value <<= 7; // tslint:disable-line:no-bitwise
            } else {
                value += byte;
                return {
                    offset: nextOffset,
                    value: value
                };
            }
        }
    };

    workerFactory.createWorker(self, {
        parse: function parse(_ref) {
            var arrayBuffer = _ref.arrayBuffer;

            var midiFile = parseArrayBuffer(arrayBuffer);
            return { result: midiFile };
        }
    });

})));
